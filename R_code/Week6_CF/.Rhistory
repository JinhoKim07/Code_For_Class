views_per_movie <- colCounts(MovieLense)
library(recommenderlab)
data("MovieLense")
ml.df <- as(MovieLense, "data.frame")
head(ml.df)
views_per_movie <- colCounts(MovieLense)
views_tbl <- data.frame(movie = names(views_per_movie), views = views_per_movie)
views_tbl <- views_tbl %>%
arrange(desc(views)) head(views_tbl, 10)
views_per_movie <- colCounts(MovieLense)
views_tbl <- data.frame(movie = names(views_per_movie), views = views_per_movie)
views_tbl <- views_tbl %>% arrange(desc(views)) head(views_tbl, 10)
views_tbl <- views_tbl %>% arrange(desc(views))
views_tbl <- views_tbl %>% arrange(desc(views))
views_tbl <- views_tbl %>% arrange(desc(views))
library(dplyr)
library(ggplot2)
ratings_v <- ratings_v[ratings_v != 0]
ggplot(data.frame(rating = ratings_v), aes(x = rating))
+ geom_bar() + ggtitle("\nRating Distribution\n")
views_per_movie <- colCounts(MovieLense)
source('~/.active-rstudio-document', echo=TRUE)
ggplot(data.frame(rating = ratings_v), aes(x = rating))
ggplot(data.frame(rating = ratings_v), aes(x = rating)) + geom_bar() + ggtitle("\nRating Distribution\n")
views_per_movie <- colCounts(MovieLense)
views_tbl <- data.frame(movie = names(views_per_movie), views = views_per_movie)
views_tbl <- views_tbl %>% arrange(desc(views))
head(views_tbl,10)
views_per_movie
평점
views_per_movie <- colCounts(MovieLense)
views_tbl <- data.frame(movie = names(views_per_movie), views = views_per_movie)
views_tbl <- views_tbl %>% arrange(desc(views))
head(views_tbl,10)
views_per_movie <- colCounts(MovieLense)
views_per_movie <- colCounts(MovieLense)
views_per_movie
??colCounts
views_tbl <- data.frame(movie = names(views_per_movie), views = views_per_movie)
views_tbl
views_tbl <- views_tbl %>% arrange(desc(views))
views_tbl
head(views_tbl,10)
views_per_movie <- colCounts(MovieLense)
views_per_movie
top20 <- views_tbl[1:20, ]
top20 <- views_tbl[1:20, ]
top20$movie <- as.character(top20$movie)
ggplot(top20, aes(x = reorder(movie, views), y = views)) + geom_col() +
coord_flip() +
geom_text(aes(y = 20, label = views), color = 'white') + xlab("Movie") + ylab("Views") +
theme(axis.text.x = element_text(angle = 90, face = "italic")) + ggtitle("\nTop 20 Most Viewed Movies\n")
top20
head(views_tbl,20)
top20$movie
rating_movies <- MovieLense[rowCounts(MovieLense) > 50, colCounts(MovieLense) > 100]
rating_movies
table(ratings_v)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
image(ratings_movies_norm[rowCounts(ratings_movies_norm) > min_movies,
colCounts(rating_movies_norm) > min_users],
main = "Heatmap of Top 10% Moveis and Users")
image(ratings_movies_norm[rowCounts(ratings_movies_norm) > min_movies,
colCounts(ratings_movies_norm) > min_users],
main = "Heatmap of Top 10% Moveis and Users")
ies <- MovieLense[rowCounts(MovieLense) > 50, colCounts(MovieLense) > 100]
min_movies <- quantile(rowCounts(ratings_movies), 0.90)
min_users <- quantile(colCounts(ratings_movies), 0.90)
rating_movies_norm <- normalize(rating_movies)
image(ratings_movies_norm[rowCounts(ratings_movies_norm) > min_movies,
colCounts(ratings_movies_norm) > min_users],
main = "Heatmap of Top 10% Moveis and Users")
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
library(recommenderlab)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/Lecture/Lecture-IR4.0/Week5_ID_CFCB/Movie.R', encoding = 'UTF-8', echo=TRUE)
source('~/Lecture/Lecture-IR4.0/Week5_ID_CFCB/Movie.R', encoding = 'UTF-8', echo=TRUE)
source('~/Lecture/Lecture-IR4.0/Week5_ID_CFCB/Movie.R', encoding = 'UTF-8', echo=TRUE)
source('~/Lecture/Lecture-IR4.0/Week5_ID_CFCB/Movie.R', encoding = 'UTF-8', echo=TRUE)
library(dplyr)
library(dplyr)
library(dplyr)
source('~/Lecture/Lecture-IR4.0/Week5_ID_CFCB/Movie.R', encoding = 'UTF-8', echo=TRUE)
source('~/Lecture/Lecture-IR4.0/Week5_ID_CFCB/Movie.R', encoding = 'UTF-8', echo=TRUE)
source('~/Lecture/Lecture-IR4.0/Week5_ID_CFCB/Movie.R', encoding = 'UTF-8', echo=TRUE)
source('~/Lecture/Lecture-IR4.0/Week5_ID_CFCB/Movie.R', echo=TRUE)
rating_movies <- MovieLense[rowCounts(MovieLense) > 50, colCounts(MovieLense) > 100]
min_movies <- quantile(rowCounts(ratings_movies), 0.90)
ratings_movies <- MovieLense[rowCounts(MovieLense) > 50, colCounts(MovieLense) > 100]
min_movies <- quantile(rowCounts(ratings_movies), 0.90)
min_users <- quantile(colCounts(ratings_movies), 0.90)
rating_movies_norm <- normalize(rating_movies)
image(ratings_movies_norm[rowCounts(ratings_movies_norm) > min_movies,
colCounts(ratings_movies_norm) > min_users],
main = "Heatmap of Top 10% Moveis and Users")
ratings_movies_norm <- normalize(rating_movies)
image(ratings_movies_norm[rowCounts(ratings_movies_norm) > min_movies,
colCounts(ratings_movies_norm) > min_users],
main = "Heatmap of Top 10% Moveis and Users")
ratings_movies_norm <- normalize(rating_movies)
ratings_movies_norm
set.seed(1)
train_sample <- sample(x = c(T,F), size = nrow(rating_movies),
replace= T, prob = c(0.8,0.2))
train <- ratings_movies[train_sample, ]
test <- ratings_movies[!train_sample, ]
recommender_models <- recommenderRegistry$get_entries(dataType="realRatingMatrix")
recommender_models$UBCF_realRatingMatrix$parameters
trin
train
test
train_sample
recc_model <- Recommender(data = train, method = "UBCF",
parameter = list(method = "pearson", nn = 15))
getModel(recc_model)
n_recommended <- 5
recc_predicted <- predict(object = recc_model, newdata = test, n = n_recommended)
recc_predicted
recc_user_7 <- recc_predicted@items[[7]]
movies_user_7 <- recc_predicted@itemLabels[recc_user_7]
movies_user_7
ratings_user_7 <- recc_predicted@ratings[[7]]
ratings_user_7
train.df <- as(train, 'data.frame')
test.df <- as(test, 'data.frame')
train.df
movieList <- function(df, i, favorite = TRUE, minRating = 3){ userID <- names(recc_predicted@items)[i] dplyr::filter(df, user == userID) %>%
dplyr::select(-user) -> movieList
if(favorite){
movieList <- movieList %>%
dplyr::filter(rating >= minRating)
}
cat("User ID:", userID, "\n")
cat("Minimum Rating:", minRating, "\n")
cat("The Length of Movie List:", nrow(movieList)) return(movieList)
}
movieList(test.df, 1, minRating = 5)
source('~/Lecture/Lecture-IR4.0/Week5_ID_CFCB/Movie.R', echo=TRUE)
source('~/Lecture/Lecture-IR4.0/Week5_ID_CFCB/Movie.R', echo=TRUE)
train_sample
source('~/.active-rstudio-document', echo=TRUE)
train
set.seed(1)
train_sample <- sample(x = c(T,F), size = nrow(rating_movies),
replace= T, prob = c(0.8,0.2))
train <- ratings_movies[train_sample, ]
test <- ratings_movies[!train_sample, ]
recc_model <- Recommender(data = train, method = "UBCF",
parameter = list(method = "pearson", nn = 15))
getModel(recc_model)
set.seed(1)
train_sample <- sample(x = c(T,F), size = nrow(rating_movies),
replace= T, prob = c(0.8,0.2))
train <- ratings_movies[train_sample, ]
test <- ratings_movies[!train_sample, ]
recc_model <- Recommender(data = train, method = "UBCF",
parameter = list(method = "pearson", nn = 15))
getModel(recc_model)
n_recommended <- 5
recc_predicted <- predict(object = recc_model, newdata = test, n = n_recommended)
recc_predicted
recc_user_7 <- recc_predicted@items[[7]]
movies_user_7 <- recc_predicted@itemLabels[recc_user_7]
movies_user_7
ratings_user_7 <- recc_predicted@ratings[[7]]
ratings_user_7
recc_model
train.df <- as(train, 'data.frame')
test.df <- as(test, 'data.frame')
movieList <- function(df, i, favorite = TRUE, minRating = 3){
userID <- names(recc_predicted@items)[i]
dplyr::filter(df, user == userID) %>% dplyr::select(-user) -> movieList
if(favorite){
movieList <- movieList %>%
dplyr::filter(rating >= minRating)
}
cat("User ID:", userID, "\n")
cat("Minimum Rating:", minRating, "\n")
cat("The Length of Movie List:", nrow(movieList))
return(movieList)
}
movieList(test.df, 1, minRating = 5)
source('~/Lecture/Lecture-IR4.0/Week5_ID_CFCB/CFCB_Example.R', echo=TRUE)
pearson(mat,1,2)
pearson(mat,1,3)
pearson(mat,1,4)
pearson(mat,1,5)
source('~/Lecture/Lecture-IR4.0/Week5_ID_CFCB/Movie.R', echo=TRUE)
views_per_movie <- colCounts(MovieLense)
views_per_movie
x <- 1:100
typeof(x) # integer
y <- x+1
typeof(y) # double, twice the memory size
object.size(y) # 840 bytes (on win64)
z <- x+1L
typeof(z) # still integer
object.size(z) # 440 bytes (on win64)
source('~/Lecture/Lecture-IR4.0/Week4-Deeplearning/MNIST_beginner.R', echo=TRUE)
install.packages("tensorflow")
devtools::install_github("rstudio/tensorflow")
install.packages("devtools")
devtools::install_github("rstudio/tensorflow")
source('~/Lecture/Lecture-IR4.0/Week4-Deeplearning/MNIST_beginner.R', echo=TRUE)
source('~/Lecture/Lecture-IR4.0/Week4-Deeplearning/MNIST_Convol.R', echo=TRUE)
source('~/Lecture/Lecture-IR4.0/Week4-Deeplearning/MNIST_Convol.R', echo=TRUE)
source('~/Lecture/Lecture-IR4.0/Week4-Deeplearning/MNIST_beginner.R', echo=TRUE)
Heart_data <- read.csv('http://www-bcf.usc.edu/~gareth/ISL/Heart.csv')
str(Heart_data)
Heart_data <- read.csv('http://www-bcf.usc.edu/~gareth/ISL/Heart.csv')
source('~/Lecture/Lecture-IR4.0/Week5_ID_CFCB/C5.0.R', echo=TRUE)
summary(Heart_data)
str(Heart_data)
trainIdx <- sample(1:nrow(Heart_data),size=nrow(Heart_data) * 0.7)
trainIdx
trainIdx <- sort(trainIdx)
trainIdx
train_heart
Train_heart
train_Heart
train_Heart <- Heart_data[trainIdx,]
train_Heart
test_Heart <- Heart_data[-trainIdx,]
test_Heart
summary(train_Heart)
summary(test_Heart)
str(Heart_data)
HeartC5 <- C5.0(AHD~., data= train_Heart, method="class")
summary(HeartC5)
predictHeart <- predict.C5.0(HeartC5, test_Heart)
summary(predictHeart)
predictHeart
test_Heart$AHD
accuracy <- function(actual, predict){
sum(actual==predict)/length(actual)
}
accuracy(test_Heart$AHD, predictHeart)
source('~/Lecture/Lecture-IR4.0/Week5_ID_CFCB/CART_heart.R', echo=TRUE)
str(Heart_data)
source('~/Lecture/Lecture-IR4.0/Week5_ID_CFCB/CART_heart.R', echo=TRUE)
Heart_data <- read.csv('http://www-bcf.usc.edu/~gareth/ISL/Heart.csv')
str(Heart_data)
summary(Heart_data)
library(caret)
library(rpart)
library(rpart.plot)
set.seed(20161129)
trainIdx <- sample(1:nrow(Heart_data),size=nrow(Heart_data) * 0.7)
trainIdx <- sort(trainIdx)
train_Heart <- Heart_data[trainIdx,]
test_Heart <- Heart_data[-trainIdx,]
HeartTree <- rpart(AHD~., data= train_Heart, method="class")
HeartTree
rpart.plot(HeartTree)
rpart.plot(HeartTree)
predictHeart <- predict(HeartTree, test_Heart, type="class")
accuracy <- function(actual, predict){
sum(actual==predict)/length(actual)
}
accuracy(test_Heart$AHD, predictHeart)
source('~/Lecture/Lecture-IR4.0/Week5_ID_CFCB/C5.0.R', echo=TRUE)
source('~/Lecture/Lecture-IR4.0/Week5_ID_CFCB/C5.0.R', echo=TRUE)
printcp(HeartTree)
plotcp(HeartTree)
plotcp(HeartTree)
plotcp(HeartTree)
plotcp(HeartTree)
mat <- matrix(c(5, 3, 4, 3, 1,
3, 1, 3, 3, 5,
4, 2, 4, 1, 5,
4, 3, 3, 5, 2,
NA,3, 5, 4, 1),
ncol = 5, nrow = 5)
pearson <- function(mat, i, j){
mat <- t(na.omit(t(mat)))
numer <- sum( (mat[i, ] - mean(mat[i, ])) * (mat[j, ] - mean(mat[j, ])))
denom1 <- sqrt(sum((mat[i, ] - mean(mat[i, ]))^2))
denom2 <- sqrt(sum((mat[j, ] - mean(mat[j, ]))^2))
return(numer / (denom1 * denom2))
}
pearson(mat,1,2)
pearson(mat,1,3)
pearson(mat,1,4)
pearson(mat,1,5)
source('~/Lecture/Lecture-IR4.0/Week6_CF/CFCB_Example.R', echo=TRUE)
source('~/Lecture/Lecture-IR4.0/Week6_CF/Germany_IB.R', echo=TRUE)
mat <- matrix(c(5, 3, 4, 3, 1,
3, 1, 3, 3, 5,
4, 2, 4, 1, 5,
4, 3, 3, 5, 2,
NA,3, 5, 4, 1),
ncol = 5, nrow = 5)
mat
na.omit(mat)
mat
t(mat)
na.moit(t(mat))
na.omit(t(mat))
t(na.omit(t(mat)))
mat <- t(na.omit(t(mat)))
mat
i <- 1
j <- 2
mean(mat[i,])
mat[i,] - mean(mat[i,])
mat[i,]
(mat[i,] - mean(mat[i,])) * (mat[j,]-mean(mat[j,]))
sum((mat[i,] - mean(mat[i,])) * (mat[j,]-mean(mat[j,])))
sqrt((mat[i,]-mean(mat[i,]))^2)
sqrt(sum(mat[i,]-mean(mat[i,]))^2)
pearson(mat,1,2)
pearson(mat,1,3)
pearson(mat,1,4)
pearson(mat,1,5)
mat
mat <- matrix(c(5, 3, 4, 3, 1,
3, 1, 3, 3, 5,
4, 2, 4, 1, 5,
4, 3, 3, 5, 2,
NA,3, 5, 4, 1),
ncol = 5, nrow = 5)
mat
mat <- na.omit(mat)
mat
i <- 1
j <- 2
mat[,i]*mat[,j]
numer <- sum(mat[,i]*mat[,j])
numer
sqrt(sum(mat[,i]^2))
adjustcosine <- function(mat, i, j){
mat <- na.omit(mat)
numer <- sum(mat[,i]*mat[,j])
denom1 <- sqrt(sum(mat[,i]^2))
denom2 <- sqrt(sum(mat[,j]^2))
return(numer / (denom1 * denom2))
}
adjustcosine(mat, 5, 1)
adjustcosine(mat, 5, 2)
adjustcosine(mat, 5, 3)
adjustcosine(mat, 5, 4)
setwd("/Users/Jinho/Lecture/Lecture-IR4.0/Week6_CF")
getwd()
wd
getwd
getwd()
data.germany <- read.csv(file = "lastfm-matrix-germany.csv")
source('~/[Database]/Lecture/Lecture-IR4.0/Week3-GeneticAlgorithm/Equation.R', echo=TRUE)
source('~/[Database]/Lecture/Lecture-IR4.0/Week3-GeneticAlgorithm/Genetic_survivialbag.R', echo=TRUE)
source('~/[Database]/Lecture/Lecture-IR4.0/Week3-GeneticAlgorithm/Shortest_Pth_TSP.R', echo=TRUE)
cat(summary(GAmodel))
source('~/[Database]/Lecture/Lecture-IR4.0/Week3-GeneticAlgorithm/Genetic_survivialbag.R', echo=TRUE)
source('~/[Database]/Lecture/Lecture-IR4.0/Week3-GeneticAlgorithm/Shortest_Pth_TSP.R', echo=TRUE)
source('~/[Database]/Lecture/Lecture-IR4.0/Week3-GeneticAlgorithm/Equation.R', echo=TRUE)
source('~/[Database]/Lecture/Lecture-IR4.0/Week6_CF/Full.R', echo=TRUE)
setwd("/Users/Jinho/[Database]/Lecture/Lecture-IR4.0/Week6_CF/")
source('~/[Database]/Lecture/Lecture-IR4.0/Week6_CF/Full.R', echo=TRUE)
setwd("/Users/Jinho/Lecture/Lecture-IR4.0/Week6_CF")
getwd()
data.germany <- read.csv(file = "lastfm-matrix-germany.csv")
head(data.germany[,c(1:8)])
data.germany.ibs <- (data.germany[,!(names(data.germany) %in% c("user"))])
head(data.germany.ibs[,c(1:8)])
data.germany.ibs <- (data.germany[,!(names(data.germany) %in% c("user"))])
head(data.germany.ibs[,c(1:8)])
data.germany.ibs <- (data.germany[,!(names(data.germany) %in% c("user"))])
head(data.germany.ibs[,c(1:8)])
getCosine <- function(x,y){
this.cosine <- sum(x*y) / sqrt(sum(x*x)) / sqrt(sum(y*y))
return(this.cosine)
}
data.germany.ibs.similarity  <- matrix(NA,
nrow=ncol(data.germany.ibs),
ncol=ncol(data.germany.ibs),
dimnames=list(colnames(data.germany.ibs),
colnames(data.germany.ibs)))
for (i in 1:ncol(data.germany.ibs)) {
for (j in 1:ncol(data.germany.ibs)){
data.germany.ibs.similarity[i,j] <- getCosine(as.matrix(data.germany.ibs[i]),as.matrix(data.germany.ibs[j]))
}
}
data.germany.ibs.similarity <- as.data.frame(data.germany.ibs.similarity)
data.germany.ibs.similarity
??matrix
data.germany.ibs.similarity
data.germany.neighbours <- matrix(NA,
nrow=ncol(data.germany.ibs.similarity),
ncol=10,
dimnames=list(colnames(data.germany.ibs.similarity)))
for(i in 1:ncol(data.germany.ibs)) {
data.germany.neighbours[i,]  <- (t(head(n=10,rownames(data.germany.ibs.similarity
[order(data.germany.ibs.similarity[,i],decreasing=TRUE),][i]))))
}
data.germany.neighbours["beyonce",c(1:10)]
data.germany.neighbours
i = 1
order(data.germany.ibs.similarity[,i],decreasing=TRUE)
??head
head (n=10,rownames(data.germany.ibs.similarity [order(data.germany.ibs.similarity[,i],decreasing=TRUE),][i])))
head (n=10,rownames(data.germany.ibs.similarity [order(data.germany.ibs.similarity[,i],decreasing=TRUE),][i]))
t(head (n=10,rownames(data.germany.ibs.similarity [order(data.germany.ibs.similarity[,i],decreasing=TRUE),][i])))
source('~/[Database]/Lecture/Lecture-IR4.0/Week3-GeneticAlgorithm/Equation.R', echo=TRUE)
source('~/[Database]/Lecture/Lecture-IR4.0/Week3-GeneticAlgorithm/Equation.R', echo=TRUE)
GAmodel
source('~/[Database]/Lecture/Lecture-IR4.0/Week3-GeneticAlgorithm/Equation.R', echo=TRUE)
library(genalg)
library(ggplot2)
library(genalg)
library(ggplot2)
dataset <- data.frame(
item = c("pocketknife","beans","potatoes",
"onions","sleeping bag","rope",
"compass","lighter"),
survivalpoints = c(10,20,15,2,30,10,30,50),
weight = c(1,5,10,1,7,5,1,1)
)
dataset
source('~/[Database]/Lecture/Lecture-IR4.0/Week3-GeneticAlgorithm/Genetic_survivialbag.R', echo=TRUE)
source('~/[Database]/Lecture/Lecture-IR4.0/Week3-GeneticAlgorithm/Genetic_survivialbag.R', echo=TRUE)
source('~/[Database]/Lecture/Lecture-IR4.0/Week3-GeneticAlgorithm/Genetic_survivialbag.R', echo=TRUE)
summary(GAmodel)
GAmodel
source('~/[Database]/Lecture/Lecture-IR4.0/Week3-GeneticAlgorithm/Shortest_Pth_TSP.R', echo=TRUE)
source('~/[Database]/Lecture/Lecture-IR4.0/Week3-GeneticAlgorithm/Shortest_Pth_TSP.R', echo=TRUE)
source('~/[Database]/Lecture/Lecture-IR4.0/Week3-GeneticAlgorithm/Shortest_Pth_TSP.R', echo=TRUE)
source('~/[Database]/Lecture/Lecture-IR4.0/Week3-GeneticAlgorithm/Shortest_Pth_TSP.R', echo=TRUE)
??iris
iris
mat <- matrix(c(5, 3, 4, 3, 1,
3, 1, 3, 3, 5,
4, 2, 4, 1, 5,
4, 3, 3, 5, 2,
NA,3, 5, 4, 1),
ncol = 5, nrow = 5)
t(mat)
mat
pearson <- function(mat, i, j){
mat <- t(na.omit(t(mat)))
numer <- sum( (mat[i, ] - mean(mat[i, ])) * (mat[j, ] - mean(mat[j, ])))
denom1 <- sqrt(sum((mat[i, ] - mean(mat[i, ]))^2))
denom2 <- sqrt(sum((mat[j, ] - mean(mat[j, ]))^2))
return(numer / (denom1 * denom2))
}
person(mat,1,1)
pearson(mat,1,1)
pearson(mat,1,2)
pearson(mat,1,3)
pearson(mat,1,4)
pearson(mat,1,5)
adjustcosine <- function(mat, i, j){
mat <- na.omit(mat)
numer <- sum(mat[,i]*mat[,j])
denom1 <- sqrt(sum(mat[,i]^2))
denom2 <- sqrt(sum(mat[,j]^2))
return(numer / (denom1 * denom2))
}
adjustcosine(mat, 5, 1)
adjustcosine(mat, 5, 2)
adjustcosine(mat, 5, 3)
adjustcosine(mat, 5, 4)
adjustcosine(mat, 5, 5)
source('~/Desktop/Week6_CF/Germany_IB.R', echo=TRUE)
data.germany <- read.csv(file = "lastfm-matrix-germany.csv")
source('~/Desktop/Week6_CF/Germany_IB.R', echo=TRUE)
iris
summary(iris)
iris
