hist(Data$Sepal.Width, main = "Sepal Length", xlab = "cm", probability = TRUE)
hist(Data$Sepal.Width, main = "Sepal Legnth", xlab = "cm", breaks = seq(2,5,0.2),probability = TRUE)
x <- seq(x_min,x_max,length = 200)
y <- dnorm(x, mean = Sepal_mean, sd=Sepal_sd)
plot(x, y, ylab = "normal distribtuion")
line(density(y))
hist(Data$Sepal.Width, main = "Sepal Length", xlab = "cm", probability = TRUE)
hist(Data$Sepal.Width, main = "Sepal Legnth", xlab = "cm", breaks = seq(2,5,0.2),probability = TRUE)
line(density(y))
lines(density(y))
lines(y)
y <- dnorm(x, mean = Sepal_mean, sd=Sepal_sd)
plot(x, y, ylab = "normal distribtuion")
hist(Data$Sepal.Width, main = "Sepal Legnth", xlab = "cm", breaks = seq(2,5,0.2),probability = TRUE)
lines(y)
hist(Data$Sepal.Width, main = "Sepal Legnth", xlab = "cm", breaks = seq(2,5,0.2), probability = TRUE)
lines(y)
lines(density(y))
hist(Data$Sepal.Width, main = "Sepal Legnth", xlab = "cm", breaks = seq(2,5,0.2), probability = TRUE)
lines(density(y))
hist(Data$Sepal.Width/length(Sepal.Width), main = "Sepal Legnth", xlab = "cm", breaks = seq(2,5,0.2))
hist(Data$Sepal.Width/length(Data$Sepal.Width), main = "Sepal Legnth", xlab = "cm", breaks = seq(2,5,0.2))
hist(Data$Sepal.Width, main = "Sepal Legnth", xlab = "cm", breaks = seq(2,5,0.2),probability = TRUE)
plot(x, y, ylab = "normal distribtuion")
??hist
hist(Data$Sepal.Width, main = "Sepal Legnth", xlab = "cm", breaks = seq(2,5,0.2), freq=TRUE)
hist(Data$Sepal.Width, main = "Sepal Legnth", xlab = "cm", breaks = seq(2,5,0.2), freq=FALSE)
lines(y)
lines(x,y)
hist(Data$Sepal.Width, main = "Sepal Legnth", xlab = "cm", breaks = seq(2,5,0.2), freq=FALSE)
lines(x,y)
lines(x,y,c="Red")
??lines
lines(x,y,col="red")
hist(Data$Sepal.Width, main = "Sepal Legnth", xlab = "cm", breaks = seq(2,5,0.2), freq=FALSE,right = TRUE)
lines(x,y,col="red")
hist(Data$Sepal.Width, main = "Sepal Legnth", xlab = "cm", breaks = seq(2,5,0.2), freq=FALSE,right = FALSE)
lines(x,y,col="red")
??hist
hist(Data$Sepal.Width, main = "Sepal Legnth", xlab = "cm", breaks = seq(2,5,0.2), freq=FALSE)
lines(x,y,col="red")
hist(Data$Sepal.Width, main = "Sepal Legnth", xlab = "cm", breaks = seq(2,5,0.2))
lines(x,y,col="red")
hist(Data$Sepal.Width, main = "Sepal Legnth", xlab = "cm", breaks = seq(2,5,0.2))
lines(x,y,col="red")
hist(Data$Sepal.Width, main = "Sepal Legnth", xlab = "cm", breaks = seq(2,5,0.2),probability = TRUE)
lines(x,y,col="red")
install.packages("fitdistplus",dependencies = T)
if(!require(installr)) {
install.packages("installr"); require(installr)}
updateR()
if(!require(installr)) {
install.packages("installr"); require(installr)}
install.packages("installr")
install.packages("fitdistplus",dependencies = T)
install.packages("fitdistplus")
install.packages("fitdistrplus")
library(fitdistrplus)
plotdist(Data$Sepal.Width)
descdist(Data$Sepal.Width)
plotdist(Data$Sepal.Length)
descdist(Data$Sepal.Length)
descdist(Data$Petal.Width)
source('~/.active-rstudio-document', echo=TRUE)
plotdist(Data$Petal.Length)
descdist(Data$Sepal.Length)
descdist(Data$Petal.Width)
descdist(Data$Petal.Length)
descdist(Data$Sepal.Length)
descdist(Data$Sepal.Width)
descdist(Data$Petal.Width)
descdist(Data$Petal.Length)
Data <- iris
iris_train <- sample (Data,0.7)
iris_train
summary(iris_train)
iris_train <- sample (Data,length(Data)*0.7)
summary(iris_train)
summary(iris_train)
iris_train <- sample (Data,length(Data$Sepal.Length)*0.7)
summary(iris_train)
summary(iris_train)
iris_train <- sample(Data$Sepal.Length,length(Data$Sepal.Length)*0.7)
summary(iris_train)
train_ind <- sample(seq_len(nrow(Data)),size = floor(0.7*nrow(Data)))
train <- Data[train_ind,]
test <- Data[-train_ind,]
summary(train)
summary(test)
??floor
0.7*nrow(Data)
floor(0.7*nrow(Data))
Data <- iris
train_ind <- sample(seq_len(nrow(Data)),size = floor(0.7*nrow(Data)))
train <- Data[train_ind,]
test <- Data[-train_ind,]
Data <- iris
train_ind <- sample(seq_len(nrow(Data)),size = floor(0.7*nrow(Data)))
train <- Data[train_ind,]
test <- Data[-train_ind,]
Data <- iris
train_ind <- sample(seq_len(nrow(Data)),size = floor(0.7*nrow(Data)))
train <- Data[train_ind,]
test <- Data[-train_ind,]
data()
summary(Raw)
Raw = data("Titanic")
summary(Raw)
Summary(Titanic)
summary(Titanic)
Titanic
data()
data("cars")
cars
data()
data("EuStockMarkets")
EuStockMarkets
Raw = read.table("http://www.rossmanchance.com/iscam2/data/housing.txt", header = T, sep = "\t")
Raw
summary(Raw)
data()
data("AirPassengers")
AirPassengers
Raw = read.table("https://github.com/JinhoKim07/Code_For_Class/blob/master/Data/BostonHousing.xls", header = T, sep = "\t")
Raw = read.table("https://github.com/JinhoKim07/Code_For_Class/blob/master/Data/BostonHousing.xls", header = T)
Raw = read.table("https://github.com/JinhoKim07/Code_For_Class/blob/master/Data/BostonHousing.xls", header = TRUE)
Raw = read.table("https://github.com/JinhoKim07/Code_For_Class/blob/master/Data/BostonHousing.csv", header = TRUE)
Raw = read.table("https://github.com/JinhoKim07/Code_For_Class/blob/master/Data/BostonHousing.csv", header = TRUE)
Raw = read.table(file= "https://github.com/JinhoKim07/Code_For_Class/blob/master/Data/BostonHousing.csv", header = TRUE)
Raw = read.table(file= "https://github.com/JinhoKim07/Code_For_Class/blob/master/Data/BostonHousing.csv", header = TRUE, sep="\t")
Raw <- read.table(file= "https://github.com/JinhoKim07/Code_For_Class/blob/master/Data/BostonHousing.csv", header = TRUE, sep="\t")
Raw <- read.table(file= "https://github.com/JinhoKim07/Code_For_Class/blob/master/Data/BostonHousing.csv", header = TRUE, sep="\t")
View(Raw)
Raw <- read.table(file= "https://github.com/JinhoKim07/Code_For_Class/blob/master/Data/BostonHousing.xls", header = TRUE, sep="\t")
Raw <- read.table(file= "https://github.com/JinhoKim07/Code_For_Class/blob/master/Data/BostonHousing.csv", header = TRUE, sep="\t")
Raw <- read.csv(urlfile)
urlfile <- "https://github.com/JinhoKim07/Code_For_Class/blob/master/Data/BostonHousing.csv"
Raw <- read.csv(urlfile)
Raw <- read.csv(url(urlfile))
data(USArrests)
USArrests
data("USAccDeaths")
USAccDeaths
mtcars
summary(mtcars)
describe(mtcars)
head(mtcars)
str(mtcars)
getwd()
weight <- c(72,57,60,78,82)
mean(weight)
mean(myNum)
myNum <- sample(x=1:100, size=100, replace=TRUE)
myNum
mean(myNum)
getwd()
setwd("/Users/Jinho/Dropbox/[Lecture]/18_이공계기반구매엔지니어양성과정/정형데이터/Data")
Raw <- read.table("./auto-mpg.data", sep = "\t")
Raw
Raw <- data.frame(read.table("./auto-mpg.data", sep = "\t"))
Raw
str(Raw)
Raw <- data.frame(read.table("./auto-mpg.data", sep = " "))
Raw <- read.table("./auto-mpg.data", sep = " ")
Raw <- read.table("./auto-mpg.data", sep = "\t")
str(Raw)
Raw <- read.table("./auto-mpg.data")
str(Raw)
summary(Raw)
Raw["V4"] <- as.numeric(Raw["V4"])
Raw["V4"] <- as.numeric(as.character(Raw["V4"]))
str(Raw)
Raw <- read.table("./auto-mpg.data")
Raw["V4"] <- as.numeric(as.character(Raw["V4"]))
summary(Raw)
Raw <- read.table("./auto-mpg.data")
str(Raw)
x <- as.numeric(as.character(Raw["V4"]))
x <- as.numeric(Raw["V4"])
x
x <- as.double(Raw["V4"])
str(Raw)
x
Raw <- read.table("./auto-mpg.data")
Raw <- read.table("./auto-mpg.data")
Raw <- data.frame(read.table("./auto-mpg.data"))
str(Raw)
Raw <- data.frame(read.table("./imports-85.data"))
str(Raw)
Raw <- data.frame(read.table("./winequality-red.csv"))
Raw <- data.frame(read.table("./winequality-red.csv",sep=";"))
str(Raw)
Raw <- as.numeric(Raw)
Raw <- data.frame(read.table("./winequality-red.csv",sep=";"))
Raw
Raw <- data.frame(read.table("./winequality-red.csv",sep=";"))
Raw
x <-as.numeric(as.character(Raw$V1))
x
Raw <- data.frame(read.table("./winequality-red.csv",sep=";",header = T))
x <-as.numeric(as.character(Raw$V1))
x
Raw
x <-as.numeric(as.character(Raw$V1))
x
Raw <- data.frame(read.table("./winequality-red.csv",sep=";",header = T))
str(Raw)
Data <- Raw
wine_lr <- lm(qulity ~ fixed.acidity + citric.acid, data=Data)
sumamry(wine_lr)
wine_lr <- lm(quality ~ fixed.acidity + citric.acid, data=Data)
sumamry(wine_lr)
summary(wine_lr)
par(mfrow=c(2,2))
par
par(mfrow=c(2,2))
plot(wine_lr)
train <- sample_frac(Data, 0.7)
library(dplyr)
Raw <- data.frame(read.table("./winequality-red.csv",sep=";",header = T))
Data <- Raw
train <- sample_frac(Data, 0.7)
Raw <- data.frame(read.table("./winequality-red.csv",sep=";",header = T))
Data <- Raw
train <- sample_frac(Data, 0.7)
trainIndex <- as.numeric(row.names(train))
test <- Data[-trainIndex, ]
train <- arrange(train)
test <- arrange(test)
train
test
wine_lr <- lm(quality ~ fixed.acidity + citric.acid, data=train)
summary(wine_lr)
par(mfrow=c(2,2))
plot(wine_lr)
mae(test$quality, preidct_wine)
MAE(test$quality, preidct_wine)
mae(test$quality, preidct_wine)
library(Metrics)
install.packages("Metrics")
library(dplyr)
library(Metrics)
Raw <- data.frame(read.table("./winequality-red.csv",sep=";",header = T))
Data <- Raw
train <- sample_frac(Data, 0.7)
trainIndex <- as.numeric(row.names(train))
test <- Data[-trainIndex, ]
train <- arrange(train)
test <- arrange(test)
wine_lr <- lm(quality ~ fixed.acidity + citric.acid, data=train)
summary(wine_lr)
par(mfrow=c(2,2))
plot(wine_lr)
preidct_wine <- predict(wine_lr, test)
mae(test$quality, preidct_wine)
logit.out <- glm (y~., family = softmax, data=train)
??glm
logit.out <- glm (quality~., family = binomial, data=train)
logit.out <- glm (quality~., family = multibinomial, data=train)
logit.out <- glm (quality~., family = multinomial, data=train)
logit.out <- glm (quality~., data=train)
summary(logit.out)
wine_lr <- lm(quality ~ ., data=train)
summary(wine_lr)
par(mfrow=c(2,2))
plot(wine_lr)
preidct_wine <- predict(wine_lr, test)
mae(test$quality, preidct_wine)
logit.out <- glm (quality~., data=train)
summary(logit.out)
wine_logit <- glm (quality~., data=train)
summary(logit.out)
par(mfrow=c(2,2))
plot(wine_logit)
preidct_wine <- predict(wine_logit, test)
mae(test$quality, preidct_wine)
#### Logistic Regression
library(nnet)
wine_logit <- multinom (quality~., data=train)
summary(logit.out)
par(mfrow=c(2,2))
plot(wine_logit)
preidct_wine <- predict(wine_logit, test)
mae(test$quality, preidct_wine)
corr(Data)
cor(Data)
wine_lr <- lm(quality ~ ., data=train)
summary(wine_lr)
par(mfrow=c(2,2))
plot(wine_lr)
preidct_wine <- predict(wine_lr, test)
mae(test$quality, preidct_wine)
cor(wine_lr)
cor(Data)
#wine_lr <- lm(quality ~ ., data=train)
wine_lr <- lm(quality ~ volatile.acidity + citric.acid + total.surfur.dioxide + alcohol , data=train)
#wine_lr <- lm(quality ~ ., data=train)
wine_lr <- lm(quality ~ volatile.acidity + citric.acid + total.sulfur.dioxide + alcohol , data=train)
summary(wine_lr)
par(mfrow=c(2,2))
plot(wine_lr)
preidct_wine <- predict(wine_lr, test)
mae(test$quality, preidct_wine)
Raw <- data.frame("./diabetes.csv")
Data <- Raw
Data
Raw
Raw <- data.frame(read.csv("./diabetes.csv"))
Data <- Raw
Data
summary(Data)
train <- sample_frac(Data, 0.7)
trainIndex <- as.numeric(row.names(train))
test <- Data[-trainIndex, ]
train <- arrange(train)
test <- arrange(test)
Diabet_logit <- glm(Outcome ~ .,family = binomial, data=train)
summary(Diabet_logit)
par(mfrow=c(2,2))
plot(wine_lr)
preidct_wine <- predict(wine_lr, test)
plot(Diabet_logit)
preidct_wine <- predict(wine_lr, test)
predict_Dia <- predict(Diabet_logit, test)
getwd()
setwd("/Users/Jinho/Dropbox/[Lecture]/18_이공계기반구매엔지니어양성과정/정형데이터/Data")
library(dplyr)
library(Metrics)
Raw <- data.frame(read.csv("./diabetes.csv"))
Data <- Raw
train <- sample_frac(Data, 0.7)
trainIndex <- as.numeric(row.names(train))
test <- Data[-trainIndex, ]
train <- arrange(train)
test <- arrange(test)
#### Linear Regression
Diabet_logit <- glm(Outcome ~ .,family = binomial, data=train)
#wine_lr <- lm(quality ~ volatile.acidity + citric.acid + total.sulfur.dioxide + alcohol , data=train)
summary(Diabet_logit)
par(mfrow=c(2,2))
plot(Diabet_logit)
predict_Dia <- predict(Diabet_logit, test)
result <- ifelse(predict_Dia > 0.5, "Yes", "No")
logit.table <- table(test$Outcome, result)
lobit.table
logit.table
predict_Dia
result <- ifelse(predict_Dia > 0.5, 1, 0)
result
accuracy(result, test$Outcome)
logit.table <- table(test$Outcome, result)
logit.table
cor(Diabet_logit)
cor(train)
#Diabet_logit <- glm(Outcome ~ .,family = binomial, data=train)
Diabet_logit <- glm(Outcome ~ Glucose+BMI+Age,family = binomial, data=train)
summary(Diabet_logit)
par(mfrow=c(2,2))
plot(Diabet_logit)
predict_Dia <- predict(Diabet_logit, test)
result <- ifelse(predict_Dia > 0.5, 1, 0)
accuracy(result, test$Outcome)
logit.table <- table(test$Outcome, result)
logit.table
Diabet_logit <- glm(Outcome ~ .,family = binomial, data=train)
summary(Diabet_logit)
par(mfrow=c(2,2))
plot(Diabet_logit)
predict_Dia <- predict(Diabet_logit, test)
result <- ifelse(predict_Dia > 0.5, 1, 0)
accuracy(result, test$Outcome)
logit.table <- table(test$Outcome, result)
logit.table
#Diabet_logit <- glm(Outcome ~ .,family = binomial, data=train) # 0.7652174
Diabet_logit <- glm(Outcome ~ Glucose+BMI+Age,family = binomial, data=train)
summary(Diabet_logit)
par(mfrow=c(2,2))
plot(Diabet_logit)
predict_Dia <- predict(Diabet_logit, test)
result <- ifelse(predict_Dia > 0.5, 1, 0)
accuracy(result, test$Outcome)
#Diabet_logit <- glm(Outcome ~ .,family = binomial, data=train) # 0.7652174
Diabet_logit <- glm(Outcome ~ Glucose+BMI+Age+Pregnancies,family = binomial, data=train)
summary(Diabet_logit)
par(mfrow=c(2,2))
plot(Diabet_logit)
predict_Dia <- predict(Diabet_logit, test)
result <- ifelse(predict_Dia > 0.5, 1, 0)
accuracy(result, test$Outcome)
library(dplyr)
library(Metrics)
Raw <- data.frame(read.csv("./diabetes.csv"))
Data <- Raw
train <- sample_frac(Data, 0.7)
trainIndex <- as.numeric(row.names(train))
test <- Data[-trainIndex, ]
train <- arrange(train)
test <- arrange(test)
library(party)
install.packages("party")
library(dplyr)
library(Metrics)
library(party)
Raw <- data.frame(read.csv("./diabetes.csv"))
Data <- Raw
train <- sample_frac(Data, 0.7)
trainIndex <- as.numeric(row.names(train))
test <- Data[-trainIndex, ]
train <- arrange(train)
test <- arrange(test)
dia_tree <- ctree(y~., data=train, control = ctree_control(maxdepth=3))
testPred <- predict(dia_tree, newdata = test)
ctree
??ctree
library(caret)
library(rpart)
library(rpart.plot)
install.packages("caret")
library(caret)
library(rpart)
library(rpart.plot)
install.packages("rpart.plot")
library(dplyr)
library(Metrics)
library(caret)
library(rpart)
library(rpart.plot)
Raw <- data.frame(read.csv("./diabetes.csv"))
Data <- Raw
train <- sample_frac(Data, 0.7)
trainIndex <- as.numeric(row.names(train))
test <- Data[-trainIndex, ]
train <- arrange(train)
test <- arrange(test)
dia_tree <- ctree(y~., data=train, control = ctree_control(maxdepth=3))
library(dplyr)
library(Metrics)
library(caret)
library(rpart)
library(rpart.plot)
Raw <- data.frame(read.csv("./diabetes.csv"))
Data <- Raw
train <- sample_frac(Data, 0.7)
trainIndex <- as.numeric(row.names(train))
test <- Data[-trainIndex, ]
train <- arrange(train)
test <- arrange(test)
dia_tree <- rpart(y~., data=train, control = ctree_control(maxdepth=3))
testPred <- predict(dia_tree, newdata = test)
rpart.plot(HeartTree)
confusionMatrix(predictHeart, test_Heart$AHD)
confusionMatrix(testPred, dia_tree$Outcome)
confusionMatrix(testPred, test$Outcome)
dia_tree <- rpart(y~., data=train, control = ctree_control(maxdepth=3))
testPred <- predict(dia_tree, newdata = test)
dia_tree <- rpart(y~., data=train, control = ctree_control(maxdepth=3))
dia_tree <- rpart(Outcome~., data=train, control = ctree_control(maxdepth=3))
dia_tree <- rpart(Outcome~., data=train)
testPred <- predict(dia_tree, newdata = test)
rpart.plot(HeartTree)
confusionMatrix(testPred, test$Outcome)
rpart.plot(dia_tree)
confusionMatrix(testPred, test$Outcome)
testPred
dia_tree <- rpart(Outcome~., data=train)
testPred <- predict(dia_tree, newdata = test)
testPred <- predict(dia_tree, newdata = test,type="class")
testPred <- predict(dia_tree, newdata = test, type="class")
testPred <- predict(dia_tree, test, type="class")
dia_tree <- rpart(Outcome~., data=train, method="class")
testPred <- predict(dia_tree, test, type="class")
rpart.plot(dia_tree)
confusionMatrix(testPred, test$Outcome)
confusionMatrix(testPred, test$Outcome)
test$Outcome
testPred
confusionMatrix(testPred, as.factor(test$Outcome))
install.packages("e1071")
confusionMatrix(testPred, as.factor(test$Outcome))
dia_tree <- rpart(Outcome ~ Glucose+BMI+Age+Pregnancies, method = "class")
dia_tree <- rpart(Outcome ~ Glucose+BMI+Age+Pregnancies, data = train, method = "class")
dia_tree <- rpart(Outcome ~. , data=train, method="class")
dia_tree <- rpart(Outcome ~ Glucose+BMI+Age+Pregnancies, data = train, method = "class")
testPred <- predict(dia_tree, test, type="class")
rpart.plot(dia_tree)
confusionMatrix(testPred, as.factor(test$Outcome))
dia_tree <- rpart(Outcome ~. , data=train, method="class")
dia_tree <- rpart(Outcome ~. , data=train, method="class") # Accuracy :
dia_tree <- rpart(Outcome ~ Glucose+BMI+Age+Pregnancies, data = train, method = "class") # Accuracy : 0.7783
testPred <- predict(dia_tree, test, type="class")
rpart.plot(dia_tree)
confusionMatrix(testPred, as.factor(test$Outcome))
#dia_tree <- rpart(Outcome ~. , data=train, method="class") # Accuracy : 0.7783
dia_tree <- rpart(Outcome ~ Glucose+BMI+Age+Pregnancies, data = train, method = "class") # Accuracy : 0.7783
testPred <- predict(dia_tree, test, type="class")
rpart.plot(dia_tree)
confusionMatrix(testPred, as.factor(test$Outcome))
#dia_tree <- rpart(Outcome ~. , data=train, method="class") # Accuracy : 0.7783
dia_tree <- rpart(Outcome ~ Glucose+BMI+Age+Pregnancies, data = train, method = "class", maxdepth = 3) # Accuracy : 0.7783
testPred <- predict(dia_tree, test, type="class")
rpart.plot(dia_tree)
confusionMatrix(testPred, as.factor(test$Outcome))
#dia_tree <- rpart(Outcome ~. , data=train, method="class") # Accuracy : 0.7783
dia_tree <- rpart(Outcome ~ Glucose+BMI+Age+Pregnancies, data = train, method = "class", maxdepth = 4) # Accuracy : 0.7783
testPred <- predict(dia_tree, test, type="class")
rpart.plot(dia_tree)
confusionMatrix(testPred, as.factor(test$Outcome))
#dia_tree <- rpart(Outcome ~. , data=train, method="class") # Accuracy : 0.7783
dia_tree <- rpart(Outcome ~ Glucose+BMI+Age+Pregnancies, data = train, method = "class") # Accuracy : 0.7783
testPred <- predict(dia_tree, test, type="class")
rpart.plot(dia_tree)
confusionMatrix(testPred, as.factor(test$Outcome))
